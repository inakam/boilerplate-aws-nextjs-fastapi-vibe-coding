---
description: 
globs: terraform/**
alwaysApply: false
---

# AWS + Terraform インフラストラクチャルール

このプロジェクトでは、AWS 上にサーバーレスアーキテクチャで Next.js + FastAPI アプリケーションをデプロイします。インフラの定義には Terraform を使用し、以下のルールに従って実装します。

## 1. 全体アーキテクチャ

このプロジェクトは以下の AWS サービスを使用しています：

- **Lambda Container**: フロントエンドとバックエンドのサーバーレス実行環境
- **ECR**: Docker コンテナイメージの保存
- **DynamoDB**: NoSQL データベース
- **S3**: 静的ファイルのストレージ
- **CloudFront**: CDN とエッジコンピューティング
- **Route53**: DNS とドメイン管理
- **ACM**: SSL/TLS 証明書の管理

## 2. Terraform ディレクトリ構造

```
terraform/
├── variables.tf      # 変数定義
├── outputs.tf        # 出力値定義
├── s3.tf             # S3バケット設定
├── dynamodb.tf       # DynamoDBテーブル設定
├── iam.tf            # IAMロールとポリシー
├── cloudfront.tf     # CloudFront配信設定
├── route53.tf        # DNS設定
├── lambda_container.tf # Lambda設定
└── modules/          # 再利用可能なモジュール
    └── lambda_container/ # Lambdaコンテナモジュール
        ├── ecr.tf      # ECRリポジトリ設定
        ├── lambda.tf   # Lambda関数設定
        ├── variables.tf # モジュール変数
        └── outputs.tf  # モジュール出力
```

## 3. 変数とプロバイダの設定

Terraform の実行に必要な変数とプロバイダを適切に設定します：

```hcl
# プロファイルとリージョンの設定
provider "aws" {
  region                   = "ap-northeast-1"
  shared_credentials_files = ["~/.aws/credentials"]
  profile                  = "[使用するプロファイル名]"
}

# 証明書発行用にus-east-1リージョンのプロバイダも設定
provider "aws" {
  alias   = "virginia"
  region  = "us-east-1"
  profile = "[使用するプロファイル名]"
}

# tfstateファイルはS3に保存
terraform {
  backend "s3" {
    encrypt                 = true
    bucket                  = "[stateを保存するS3バケット名]"
    region                  = "ap-northeast-1"
    key                     = "terraform-aws-fastapi-nextjs.tfstate"
    profile                 = "[使用するプロファイル名]"
  }
}
```

## 4. Lambda コンテナのデプロイ

フロントエンド(Next.js)とバックエンド(FastAPI)は、それぞれ Lambda Container を使用してデプロイします：

```hcl
module "frontend" {
  source = "./modules/lambda_container"

  name                   = "${var.name}-frontend"
  lambda_docker_src_path = "../frontend"
  dockerfile_name        = "Dockerfile-lambda"

  lambda_environment_variables = local.frontend_environment
  docker_build_arg             = local.frontend_environment

  aws_profile_for_lambda_update = var.profile_name
  aws_region                    = var.region
}

module "backend" {
  source = "./modules/lambda_container"

  name                   = "${var.name}-backend"
  lambda_docker_src_path = "../backend"
  dockerfile_name        = "Dockerfile-lambda"

  lambda_environment_variables = local.backend_environment
  docker_build_arg             = local.backend_environment

  aws_profile_for_lambda_update = var.profile_name
  aws_region                    = var.region
}
```

## 5. DynamoDB の設定

アプリケーションデータを保存するための DynamoDB テーブルを設定します：

```hcl
resource "aws_dynamodb_table" "table" {
  name         = "${var.name}_dynamodb_metadata"
  billing_mode = "PAY_PER_REQUEST"  # サーバーレス料金体系
  hash_key     = "id"
  range_key    = "created_at"

  attribute {
    name = "id"
    type = "S"
  }

  attribute {
    name = "created_at"
    type = "S"
  }

  attribute {
    name = "record_type"
    type = "S"
  }

  # レコードタイプによる検索用GSI
  global_secondary_index {
    name            = "record_type-index"
    hash_key        = "record_type"
    projection_type = "ALL"
  }

  # レコードタイプと作成日時による検索用GSI
  global_secondary_index {
    name            = "record_type_created_at-index"
    hash_key        = "record_type"
    range_key       = "created_at"
    projection_type = "ALL"
  }
}
```

## 6. IAM ロールとポリシー

Lambda 関数に必要な権限を付与する IAM ロールとポリシーを設定します：

```hcl
resource "aws_iam_role" "lambda_iam_role" {
  name = "${var.name}-terraform-lambda-iam-role"

  assume_role_policy = <<POLICY
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "lambda.amazonaws.com"
      },
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
POLICY
}

resource "aws_iam_role_policy" "lambda_access_policy" {
  name   = "${var.name}-terraform-lambda-access-policy"
  role   = aws_iam_role.lambda_iam_role.id
  policy = <<POLICY
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogStream",
        "logs:CreateLogGroup",
        "logs:PutLogEvents",
        "s3:*",
        "dynamodb:PutItem",
        "dynamodb:GetItem",
        "dynamodb:Query",
        "bedrock:InvokeModel"
      ],
      "Resource": "*"
    }
  ]
}
POLICY
}
```

## 7. S3 と CloudFront の設定

静的ファイル用の S3 バケットと CloudFront ディストリビューションを設定します：

```hcl
# 静的ファイル用S3バケット
resource "aws_s3_bucket" "image_bucket" {
  bucket = "static-${var.name}"
}

# パブリックアクセスをブロック
resource "aws_s3_bucket_public_access_block" "image_bucket" {
  bucket = aws_s3_bucket.image_bucket.bucket

  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

# CloudFrontからのアクセスのみ許可
resource "aws_cloudfront_origin_access_identity" "origin_access_identity" {
  comment = "CloudFront Origin Access Identity"
}

# CloudFrontディストリビューション
resource "aws_cloudfront_distribution" "static" {
  enabled         = true
  is_ipv6_enabled = true
  aliases         = [local.subdomains["static"]]

  origin {
    domain_name = aws_s3_bucket.image_bucket.bucket_regional_domain_name
    origin_id   = "S3-${aws_s3_bucket.image_bucket.id}"

    s3_origin_config {
      origin_access_identity = aws_cloudfront_origin_access_identity.origin_access_identity.cloudfront_access_identity_path
    }
  }

  default_cache_behavior {
    allowed_methods  = ["GET", "HEAD"]
    cached_methods   = ["GET", "HEAD"]
    target_origin_id = "S3-${aws_s3_bucket.image_bucket.id}"

    forwarded_values {
      query_string = true
      headers      = ["Origin"]
      cookies {
        forward = "none"
      }
    }

    viewer_protocol_policy = "redirect-to-https"
    min_ttl                = 300
    default_ttl            = 3600
    max_ttl                = 86400
  }

  viewer_certificate {
    acm_certificate_arn      = aws_acm_certificate.cert.arn
    ssl_support_method       = "sni-only"
    minimum_protocol_version = "TLSv1.2_2021"
  }
}
```

## 8. Lambda Container モジュール

Lambda Container を作成するためのモジュールでは、以下の作業を行います：

1. ECR リポジトリの作成
2. Docker イメージのビルドとプッシュ
3. Lambda 関数の作成と設定
4. Function URL の設定

```hcl
# ECRリポジトリ
resource "aws_ecr_repository" "ecr" {
  name = var.name
  force_delete = true
}

# イメージのビルドとプッシュ
resource "null_resource" "image_push" {
  triggers = {
    code_diff = sha512(join("", [
      for file in fileset(var.lambda_docker_src_path, "**/*")
      : filesha256("${var.lambda_docker_src_path}/${file}")
    ]))
  }

  provisioner "local-exec" {
    working_dir = var.lambda_docker_src_path
    command     = <<-EOF
      aws ecr get-login-password --region ap-northeast-1 --profile ${var.aws_profile_for_lambda_update} | docker login --username AWS --password-stdin ${data.aws_caller_identity.current.account_id}.dkr.ecr.ap-northeast-1.amazonaws.com; \
      docker build . --platform=linux/amd64 -f ${var.dockerfile_name} \
        ${join(" ", [for key, value in var.docker_build_arg : "--build-arg ${key}=${value}"])} \
        -t ${aws_ecr_repository.ecr.repository_url}:latest; \
      docker push ${aws_ecr_repository.ecr.repository_url}:latest
      docker system prune --volumes --force
    EOF
  }
}

# Lambda関数
resource "aws_lambda_function" "lambda" {
  function_name = var.name
  package_type  = "Image"
  image_uri     = "${aws_ecr_repository.ecr.repository_url}:latest"
  role          = aws_iam_role.lambda.arn
  publish       = true
  architectures = ["x86_64"]

  memory_size = 512
  timeout     = 30

  environment {
    variables = var.lambda_environment_variables
  }
}

# Function URL
resource "aws_lambda_function_url" "lambda" {
  function_name      = aws_lambda_function.lambda.function_name
  authorization_type = "NONE"
}
```

## 9. Route53 と ACM の設定

ドメイン名と SSL 証明書を設定します：

```hcl
# ACM証明書（CloudFront用にバージニアリージョンで作成）
resource "aws_acm_certificate" "cert" {
  provider          = aws.virginia
  domain_name       = var.root_domain
  validation_method = "DNS"
  subject_alternative_names = [
    "*.${var.root_domain}"
  ]

  lifecycle {
    create_before_destroy = true
  }
}

# DNSレコード
resource "aws_route53_record" "frontend" {
  zone_id = data.aws_route53_zone.root.zone_id
  name    = local.subdomains["frontend"]
  type    = "A"

  alias {
    name                   = aws_cloudfront_distribution.frontend.domain_name
    zone_id                = aws_cloudfront_distribution.frontend.hosted_zone_id
    evaluate_target_health = false
  }
}

resource "aws_route53_record" "backend" {
  zone_id = data.aws_route53_zone.root.zone_id
  name    = local.subdomains["backend"]
  type    = "A"

  alias {
    name                   = aws_cloudfront_distribution.backend.domain_name
    zone_id                = aws_cloudfront_distribution.backend.hosted_zone_id
    evaluate_target_health = false
  }
}

resource "aws_route53_record" "static" {
  zone_id = data.aws_route53_zone.root.zone_id
  name    = local.subdomains["static"]
  type    = "A"

  alias {
    name                   = aws_cloudfront_distribution.static.domain_name
    zone_id                = aws_cloudfront_distribution.static.hosted_zone_id
    evaluate_target_health = false
  }
}
```

## 10. デプロイ手順

この Terraform コードを使用して AWS にインフラをデプロイする手順は以下の通りです：

1. AWS プロファイルの設定

   ```bash
   aws configure --profile [プロファイル名]
   ```

2. Docker のインストールと起動確認

   ```bash
   docker --version
   ```

3. tfstate を保存する S3 バケットの作成

   ```bash
   aws s3 mb s3://[バケット名] --profile [プロファイル名]
   ```

4. Terraform の初期化

   ```bash
   cd terraform
   terraform init
   ```

5. デプロイ計画の確認

   ```bash
   terraform plan
   ```

6. インフラのデプロイ

   ```bash
   terraform apply
   ```

7. デプロイの確認
   ```bash
   terraform output
   ```

## 11. リソースの命名規則

一貫性を保つために、以下の命名規則に従ってリソースを作成します：

- すべてのリソース名には`var.name`を接頭辞として使用
- リソースタイプを名前の一部として含める（例：`${var.name}-frontend-lambda`）
- 環境ごとに異なる接頭辞を使用する（例：`dev-`、`staging-`、`prod-`）

## 12. セキュリティのベストプラクティス

セキュリティを確保するために以下のプラクティスを採用します：

- S3 バケットのパブリックアクセスをブロック
- CloudFront からのみ S3 へのアクセスを許可
- IAM ロールには最小権限の原則を適用
- 機密データは AWS シークレットマネージャーに保存
- ACM を使用して HTTPS 通信を強制
- 地理的制限を設定してアクセス元を制限


---
description: AWS Lambda Container を使ったアプリケーションデプロイのルール
globs: terraform/modules/lambda_container/**
alwaysApply: true
---

# Docker Container を使った Lambda デプロイルール

このプロジェクトでは、Next.js フロントエンドと FastAPI バックエンドを Docker Container として AWS Lambda にデプロイします。以下のルールに従って実装してください。

## 1. Dockerfile の作成

Lambda 用の Dockerfile は、各アプリケーションディレクトリに `Dockerfile-lambda` として配置します：

### フロントエンド（Next.js）の Dockerfile-lambda

```dockerfile
FROM public.ecr.aws/lambda/nodejs:18

# AWS Lambda Adapter
COPY --from=public.ecr.aws/awsguru/aws-lambda-adapter:0.8.4 /lambda-adapter /opt/extensions/lambda-adapter

WORKDIR ${LAMBDA_TASK_ROOT}

# 依存関係のインストール
COPY package.json package-lock.json ./
RUN npm ci

# アプリケーションファイルのコピー
COPY . .

# Next.jsアプリケーションのビルド
RUN npm run build

# Lambdaハンドラーの設定
CMD ["node_modules/next/dist/bin/next", "start"]
```

### バックエンド（FastAPI）の Dockerfile-lambda

```dockerfile
FROM public.ecr.aws/lambda/python:3.13

# AWS Lambda Adapter
COPY --from=public.ecr.aws/awsguru/aws-lambda-adapter:0.8.4 /lambda-adapter /opt/extensions/lambda-adapter

WORKDIR ${LAMBDA_TASK_ROOT}

# 依存関係のインストール
COPY ./requirements.txt .
RUN pip install --no-cache-dir --upgrade -r requirements.txt

# アプリケーションファイルのコピー
COPY ./app ./app

# Lambdaハンドラーの設定
ENTRYPOINT ["uvicorn"]
CMD ["app.main:app", "--host", "0.0.0.0", "--port", "8080"]
```

## 2. Terraform モジュールの使用

Lambda Container をデプロイするためのモジュールは以下のパラメータを受け取ります：

```hcl
module "backend" {
  source = "./modules/lambda_container"

  name                   = "${var.name}-backend"
  lambda_docker_src_path = "../backend"
  dockerfile_name        = "Dockerfile-lambda"

  lambda_environment_variables = {
    DYNAMODB_TABLE_NAME = aws_dynamodb_table.table.name
    ENVIRONMENT         = "production"
    # その他の環境変数
  }

  docker_build_arg             = {
    # Dockerビルド時の引数
  }

  aws_profile_for_lambda_update = var.profile_name
  aws_region                    = var.region
}
```

## 3. ECR リポジトリの管理

ECR リポジトリは各 Lambda 関数ごとに作成し、以下の設定を適用します：

```hcl
resource "aws_ecr_repository" "ecr" {
  name = var.name
  force_delete = true

  image_scanning_configuration {
    scan_on_push = true
  }

  lifecycle {
    prevent_destroy = false
  }
}
```

## 4. Docker イメージのビルドとプッシュ

Docker イメージのビルドとプッシュは、Terraform の`null_resource`を使用して行います：

```hcl
resource "null_resource" "image_push" {
  triggers = {
    # ソースコードの変更を検知してハッシュ値を生成
    code_diff = sha512(join("", [
      for file in fileset(var.lambda_docker_src_path, "**/*")
      : filesha256("${var.lambda_docker_src_path}/${file}")
    ]))
  }

  provisioner "local-exec" {
    working_dir = var.lambda_docker_src_path
    command     = <<-EOF
      # ECRへのログイン
      aws ecr get-login-password --region ${var.aws_region} --profile ${var.aws_profile_for_lambda_update} | \
      docker login --username AWS --password-stdin ${data.aws_caller_identity.current.account_id}.dkr.ecr.${var.aws_region}.amazonaws.com;

      # イメージのビルド
      docker build . --platform=linux/amd64 -f ${var.dockerfile_name} \
        ${join(" ", [for key, value in var.docker_build_arg : "--build-arg ${key}=${value}"])} \
        -t ${aws_ecr_repository.ecr.repository_url}:latest;

      # イメージのプッシュ
      docker push ${aws_ecr_repository.ecr.repository_url}:latest

      # キャッシュのクリーンアップ
      docker system prune --volumes --force
    EOF
  }
}
```

## 5. Lambda 関数の設定

Lambda 関数は以下の設定で作成します：

```hcl
resource "aws_lambda_function" "lambda" {
  function_name = var.name
  package_type  = "Image"
  image_uri     = "${aws_ecr_repository.ecr.repository_url}:latest"
  role          = aws_iam_role.lambda.arn
  publish       = true
  architectures = ["x86_64"]

  memory_size = 512  # 必要に応じて調整
  timeout     = 30   # タイムアウト設定

  # ライフサイクル設定
  lifecycle {
    create_before_destroy = true
    ignore_changes        = [image_uri]  # 手動デプロイと競合しないように
  }

  # 環境変数の設定
  environment {
    variables = var.lambda_environment_variables
  }
}
```

## 6. Lambda Function URL の設定

Lambda 関数へのアクセスには Function URL を使用します：

```hcl
resource "aws_lambda_function_url" "lambda" {
  function_name      = aws_lambda_function.lambda.function_name
  authorization_type = "NONE"  # 注意: CloudFrontからのみアクセスする場合はNONEでも可

  # CORSの設定
  cors {
    allow_credentials = true
    allow_origins     = ["*"]  # 本番環境では特定のオリジンに制限
    allow_methods     = ["*"]
    allow_headers     = ["*"]
    expose_headers    = ["*"]
    max_age           = 86400
  }
}
```

## 7. Lambda 更新のための追加設定

ECR のイメージが更新された後、Lambda がそれを使用するように更新します：

```hcl
resource "null_resource" "lambda_deployment" {
  triggers = {
    diff = null_resource.image_push.triggers.code_diff
  }

  provisioner "local-exec" {
    command = "aws lambda update-function-code --function-name ${var.name} --image ${aws_ecr_repository.ecr.repository_url}:latest --region ${var.aws_region} --profile ${var.aws_profile_for_lambda_update}"
  }

  depends_on = [aws_lambda_function.lambda, aws_lambda_function_url.lambda]
}
```

## 8. ログの設定

CloudWatch ログを設定して Lambda 関数の監視を行います：

```hcl
resource "aws_cloudwatch_log_group" "lambda" {
  name              = "/aws/lambda/${var.name}"
  retention_in_days = 3  # 保持期間は必要に応じて調整
}
```

## 9. AWS Lambda Adapter について

AWS Lambda Adapter は、Web アプリケーションを変更せずに Lambda で実行するためのアダプターです。以下の特徴があります：

- HTTP リクエストを Lambda 呼び出しに変換
- WebSockets をサポート
- ステートフルアプリケーションの実行をサポート
- コールドスタートの最適化

## 10. コンテナのリソース制約

Lambda Container には以下の制約があるため、アプリケーションの設計時に考慮してください：

- メモリ: 128MB〜10GB（512MB 推奨）
- 実行時間: 最大 900 秒（15 分）
- 一時ストレージ: 最大 10GB
- コンテナイメージサイズ: 10GB まで
- 起動時間: コールドスタートを最小化するためにイメージサイズを小さく保つ

## 11. デプロイ時の注意点

- ARM64 アーキテクチャを使用すると、コストを削減できる場合がありますが、互換性を確認してください
- 環境変数に機密情報を保存しないでください。代わりに AWS Secret Manager を使用してください
- コンテナイメージのレイヤー数を最小限に抑え、ビルド時間と起動時間を短縮してください
- マルチステージビルドを使用して最終イメージサイズを縮小してください

## 12. 開発ワークフロー

1. ローカルでアプリケーションを開発・テスト
2. Dockerfile-lambda をローカルでビルドしてテスト
3. `terraform apply`を実行して ECR と Lambda を更新
4. CloudFront と Route53 の設定で、ドメイン経由でアプリケーションにアクセス

## 13. トラブルシューティング

- コンテナのログは CloudWatch Logs で確認できます
- Lambda 関数の実行時間やメモリ使用量は CloudWatch Metrics で監視できます
- ローカルで Docker イメージが正常に動作するかテストしてからデプロイしてください
- Lambda 関数のコールドスタートが遅い場合は、イメージサイズの削減や Provisioned Concurrency の使用を検討してください


---
description: CloudFrontとRoute53を使ったドメイン管理とCDNのルール
globs: terraform/cloudfront.tf,terraform/route53.tf
alwaysApply: true
---

# CloudFront と Route53 によるドメイン管理と CDN 配信ルール

このプロジェクトでは、CloudFront を使用した CDN 配信と Route53 によるドメイン管理を行います。以下のルールに従って実装してください。

## 1. サブドメイン構成

アプリケーションは以下のサブドメイン構成を使用します：

- **フロントエンド**: `frontend.example.com` - Next.js アプリケーション
- **バックエンド**: `backend.example.com` - FastAPI
- **静的コンテンツ**: `static.example.com` - S3 バケットの静的コンテンツ

```hcl
locals {
  subdomains = {
    frontend = "frontend.${var.root_domain}"
    backend  = "backend.${var.root_domain}"
    static   = "static.${var.root_domain}"
  }
}
```

## 2. ACM 証明書の設定

CloudFront で使用する SSL 証明書は、us-east-1 リージョンに作成する必要があります：

```hcl
resource "aws_acm_certificate" "cert" {
  provider          = aws.virginia
  domain_name       = var.root_domain
  validation_method = "DNS"
  subject_alternative_names = [
    "*.${var.root_domain}"
  ]

  lifecycle {
    create_before_destroy = true
  }
}

# 証明書の検証レコード
resource "aws_route53_record" "cert_validation" {
  for_each = {
    for dvo in aws_acm_certificate.cert.domain_validation_options : dvo.domain_name => {
      name   = dvo.resource_record_name
      record = dvo.resource_record_value
      type   = dvo.resource_record_type
    }
  }

  zone_id = data.aws_route53_zone.root.zone_id
  name    = each.value.name
  type    = each.value.type
  records = [each.value.record]
  ttl     = 60
}

# 証明書の検証
resource "aws_acm_certificate_validation" "cert" {
  provider                = aws.virginia
  certificate_arn         = aws_acm_certificate.cert.arn
  validation_record_fqdns = [for record in aws_route53_record.cert_validation : record.fqdn]
}
```

## 3. Route53 ゾーンの設定

既存のドメインを使用する場合は、Route53 ゾーンをデータソースとして参照します：

```hcl
data "aws_route53_zone" "root" {
  name = var.root_domain
}
```

## 4. DNS レコードの設定

各サブドメインに A レコードを設定し、CloudFront ディストリビューションを指すようにします：

```hcl
resource "aws_route53_record" "frontend" {
  zone_id = data.aws_route53_zone.root.zone_id
  name    = local.subdomains["frontend"]
  type    = "A"

  alias {
    name                   = aws_cloudfront_distribution.frontend.domain_name
    zone_id                = aws_cloudfront_distribution.frontend.hosted_zone_id
    evaluate_target_health = false
  }
}

resource "aws_route53_record" "backend" {
  zone_id = data.aws_route53_zone.root.zone_id
  name    = local.subdomains["backend"]
  type    = "A"

  alias {
    name                   = aws_cloudfront_distribution.backend.domain_name
    zone_id                = aws_cloudfront_distribution.backend.hosted_zone_id
    evaluate_target_health = false
  }
}

resource "aws_route53_record" "static" {
  zone_id = data.aws_route53_zone.root.zone_id
  name    = local.subdomains["static"]
  type    = "A"

  alias {
    name                   = aws_cloudfront_distribution.static.domain_name
    zone_id                = aws_cloudfront_distribution.static.hosted_zone_id
    evaluate_target_health = false
  }
}
```

## 5. CloudFront ディストリビューションの設定

### 5.1 静的コンテンツ用ディストリビューション

S3 バケットのコンテンツを配信するための CloudFront ディストリビューション：

```hcl
resource "aws_cloudfront_distribution" "static" {
  enabled         = true
  is_ipv6_enabled = true
  aliases         = [local.subdomains["static"]]

  origin {
    domain_name = aws_s3_bucket.image_bucket.bucket_regional_domain_name
    origin_id   = "S3-${aws_s3_bucket.image_bucket.id}"

    s3_origin_config {
      origin_access_identity = aws_cloudfront_origin_access_identity.origin_access_identity.cloudfront_access_identity_path
    }
  }

  default_cache_behavior {
    allowed_methods  = ["GET", "HEAD"]
    cached_methods   = ["GET", "HEAD"]
    target_origin_id = "S3-${aws_s3_bucket.image_bucket.id}"

    forwarded_values {
      query_string = true
      headers      = ["Origin"]
      cookies {
        forward = "none"
      }
    }

    viewer_protocol_policy = "redirect-to-https"
    min_ttl                = 300
    default_ttl            = 3600
    max_ttl                = 86400
  }

  restrictions {
    geo_restriction {
      restriction_type = "whitelist"
      locations        = ["JP"]  # 日本からのアクセスのみ許可
    }
  }

  viewer_certificate {
    acm_certificate_arn      = aws_acm_certificate.cert.arn
    ssl_support_method       = "sni-only"
    minimum_protocol_version = "TLSv1.2_2021"
  }
}
```

### 5.2 バックエンド API 用ディストリビューション

FastAPI Lambda 関数にアクセスするための CloudFront ディストリビューション：

```hcl
resource "aws_cloudfront_distribution" "backend" {
  enabled         = true
  is_ipv6_enabled = true
  aliases         = [local.subdomains["backend"]]

  origin {
    domain_name = replace(replace(module.backend.lambda_function_url, "https://", ""), "/", "")
    origin_id   = "backend"
    custom_origin_config {
      http_port              = 80
      https_port             = 443
      origin_protocol_policy = "https-only"
      origin_ssl_protocols   = ["TLSv1.2"]
    }
  }

  default_cache_behavior {
    allowed_methods  = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
    cached_methods   = ["GET", "HEAD", "OPTIONS"]
    target_origin_id = "backend"

    forwarded_values {
      query_string = true
      headers      = ["Authorization", "Origin", "Content-Type"]
      cookies {
        forward = "all"
      }
    }

    viewer_protocol_policy = "redirect-to-https"
    min_ttl                = 0
    default_ttl            = 0
    max_ttl                = 0
  }

  restrictions {
    geo_restriction {
      restriction_type = "whitelist"
      locations        = ["JP"]
    }
  }

  viewer_certificate {
    acm_certificate_arn      = aws_acm_certificate.cert.arn
    ssl_support_method       = "sni-only"
    minimum_protocol_version = "TLSv1.2_2021"
  }
}
```

### 5.3 フロントエンド用ディストリビューション

Next.js Lambda 関数にアクセスするための CloudFront ディストリビューション：

```hcl
resource "aws_cloudfront_distribution" "frontend" {
  enabled         = true
  is_ipv6_enabled = true
  aliases         = [local.subdomains["frontend"]]

  origin {
    domain_name = replace(replace(module.frontend.lambda_function_url, "https://", ""), "/", "")
    origin_id   = "frontend"
    custom_origin_config {
      http_port              = 80
      https_port             = 443
      origin_protocol_policy = "https-only"
      origin_ssl_protocols   = ["TLSv1.2"]
    }
  }

  default_cache_behavior {
    allowed_methods  = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
    cached_methods   = ["GET", "HEAD", "OPTIONS"]
    target_origin_id = "frontend"

    forwarded_values {
      query_string = true
      headers      = ["Host", "Origin"]
      cookies {
        forward = "all"
      }
    }

    viewer_protocol_policy = "redirect-to-https"
    min_ttl                = 0
    default_ttl            = 0
    max_ttl                = 0
  }

  restrictions {
    geo_restriction {
      restriction_type = "whitelist"
      locations        = ["JP"]
    }
  }

  viewer_certificate {
    acm_certificate_arn      = aws_acm_certificate.cert.arn
    ssl_support_method       = "sni-only"
    minimum_protocol_version = "TLSv1.2_2021"
  }
}
```

## 6. CloudFront キャッシュ設定

各ディストリビューションには、用途に応じたキャッシュ設定を行います：

- **静的コンテンツ**: 長めの TTL（最大 24 時間）
- **API**: キャッシュなし（TTL=0）
- **フロントエンド**: 動的コンテンツのためキャッシュなし、静的アセットは長めの TTL

## 7. 地理的制限

セキュリティを強化するため、地理的制限を設定して特定の国からのアクセスのみを許可します：

```hcl
restrictions {
  geo_restriction {
    restriction_type = "whitelist"
    locations        = ["JP"]  # 日本からのアクセスのみ許可
  }
}
```

## 8. プロトコルポリシー

すべてのディストリビューションに対して、HTTPS リダイレクトを強制します：

```hcl
viewer_protocol_policy = "redirect-to-https"
```

## 9. オリジンタイプ別の設定

### 9.1 S3 オリジン

S3 バケットをオリジンとする場合は、Origin Access Identity を使用します：

```hcl
resource "aws_cloudfront_origin_access_identity" "origin_access_identity" {
  comment = "CloudFront Origin Access Identity"
}

origin {
  domain_name = aws_s3_bucket.image_bucket.bucket_regional_domain_name
  origin_id   = "S3-${aws_s3_bucket.image_bucket.id}"

  s3_origin_config {
    origin_access_identity = aws_cloudfront_origin_access_identity.origin_access_identity.cloudfront_access_identity_path
  }
}
```

### 9.2 Lambda Function URL オリジン

Lambda Function URL をオリジンとする場合は、カスタムオリジン設定を使用します：

```hcl
origin {
  domain_name = replace(replace(module.backend.lambda_function_url, "https://", ""), "/", "")
  origin_id   = "backend"
  custom_origin_config {
    http_port              = 80
    https_port             = 443
    origin_protocol_policy = "https-only"
    origin_ssl_protocols   = ["TLSv1.2"]
  }
}
```

## 10. カスタムエラーページ

エラー発生時のカスタムレスポンスを設定できます：

```hcl
custom_error_response {
  error_code         = 404
  response_code      = 404
  response_page_path = "/404.html"
}

custom_error_response {
  error_code         = 403
  response_code      = 403
  response_page_path = "/403.html"
}
```

## 11. WAF との統合

AWS WAF（Web Application Firewall）と統合して、セキュリティを強化できます：

```hcl
resource "aws_wafv2_web_acl" "cloudfront_waf" {
  name        = "${var.name}-cloudfront-waf"
  description = "WAF for CloudFront distributions"
  scope       = "CLOUDFRONT"

  # WAFルールの設定
  # ...
}

resource "aws_cloudfront_distribution" "frontend" {
  # ...
  web_acl_id = aws_wafv2_web_acl.cloudfront_waf.arn
  # ...
}
```

## 12. パフォーマンス最適化

CloudFront のパフォーマンスを最適化するための設定：

```hcl
resource "aws_cloudfront_distribution" "frontend" {
  # ...

  # GZip圧縮を有効化
  default_cache_behavior {
    # ...
    compress = true
    # ...
  }

  # HTTP/2を有効化
  http_version = "http2"

  # エッジロケーションの設定
  price_class = "PriceClass_200"  # 北米、欧州、アジア、中東、アフリカのエッジロケーションを使用

  # ...
}
```

## 13. ルートドメインのリダイレクト

ルートドメインからフロントエンドへのリダイレクトを設定できます：

```hcl
resource "aws_s3_bucket" "root_redirect" {
  bucket = var.root_domain
}

resource "aws_s3_bucket_website_configuration" "root_redirect" {
  bucket = aws_s3_bucket.root_redirect.id

  redirect_all_requests_to {
    host_name = local.subdomains["frontend"]
    protocol  = "https"
  }
}

resource "aws_cloudfront_distribution" "root" {
  origin {
    domain_name = aws_s3_bucket_website_configuration.root_redirect.website_endpoint
    origin_id   = "S3-Website-${aws_s3_bucket.root_redirect.bucket_regional_domain_name}"

    custom_origin_config {
      http_port              = 80
      https_port             = 443
      origin_protocol_policy = "http-only"
      origin_ssl_protocols   = ["TLSv1.2"]
    }
  }

  # その他の設定
  # ...
}

resource "aws_route53_record" "root" {
  zone_id = data.aws_route53_zone.root.zone_id
  name    = var.root_domain
  type    = "A"

  alias {
    name                   = aws_cloudfront_distribution.root.domain_name
    zone_id                = aws_cloudfront_distribution.root.hosted_zone_id
    evaluate_target_health = false
  }
}
```


